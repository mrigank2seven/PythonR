
📚 Python Notes – 11 August 2025
(Goal: Complete Python in August)

------------------------------------------------------------
1. What is Python?
Python is like a language for talking to your computer.
You give instructions in simple English-like code, and Python makes your machine do the work.

------------------------------------------------------------
2. Features of Python
1. High-Level Language
   - Think: “Let’s go to Lulu Mall.” You don’t give GPS coordinates — you just say it in simple terms.
   - Python is human-friendly like that.

2. Interpreted Language
   - Your code → Python Interpreter → Machine Instructions
   - Runs line by line (slower than compiled languages, but easier to debug).

3. Dynamic Typing
   - You don’t need to declare variable types.
   - Example:
     Java: int a = 11;
     Python: a = 11

4. Object-Oriented
   - Uses the OOP (Object-Oriented Programming) style for better structure and reusability.

5. General Purpose
   - Can be used in:
     - AI/ML → TensorFlow, PyTorch
     - Data Science → Pandas, NumPy
     - Web Development → Django, Flask
     - Automation & Scripting
     - Testing

------------------------------------------------------------
3. Python Project Basics
1. Create a Virtual Environment (keeps your project’s packages separate)
   python3 -m venv venv

2. Run Python File from CLI
   python3 file_name.py

------------------------------------------------------------
4. Printing in Python
print(11)         # Integer
print(True)       # Boolean
print("Tony")     # String
print(10.75)      # Float

------------------------------------------------------------
5. Identifiers & Naming Rules
Identifiers = Names for things (variables, functions, classes, etc.)

Naming Conventions:
Variables, functions, modules, packages  → snake_case   → user_name
Classes, Exceptions, Enums               → PascalCase   → UserProfile
Constants                                → ALL_CAPS     → PI = 3.14
Private variables                        → _single_leading_underscore
Strong private variables                 → __double_leading_underscore
Magic/Dunder methods                     → __double_underscore__

------------------------------------------------------------
6. Comments in Python
Used to explain code (for you & other devs).

1. Single-line comment → # This is a comment
2. Multi-line comment:
   """
   This is a multi-line
   comment
   """

Good practice: Write comments to explain logic, not obvious things.

------------------------------------------------------------
7. Taking User Input
name = input("Enter your name: ")
- Input is always taken as a string by default.

------------------------------------------------------------
8. Type Casting
Changing data from one type to another.

Functions:
int()   → to integer
float() → to float
str()   → to string
bool()  → to boolean

Conversion Table:
From ↓ \ To → | int | float | bool | str
-----------------------------------------
int           | ✅  | ✅    | ❌   | ✅
float         | ❌  | ✅    | ❌   | ✅
bool          | ✅  | ✅    | ✅  | ✅
str           | ❌  | ❌    | ✅  | ✅

✅ = Works
❌ = Doesn’t work directly

------------------------------------------------------------
9. Built-in Data Types
Python stores data in containers.

Basic Data Types:
1. Text → str
2. Numbers → int, float, complex
3. Boolean → True, False

Advanced Data Types:
4. Sequence Types → list, tuple, range
   list = Can store different types of data (heterogeneous)
   Example:
   my_list = [1, "Apple", 3.14, True]

------------------------------------------------------------